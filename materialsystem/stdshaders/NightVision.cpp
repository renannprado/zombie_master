//#include "BaseVSShader.h"
//
////qck: The shader dll stuff for nightvision. Basically, hand off the frame to the shader, mess with it,
////and display it. No fancy blending stuff. 
//
//BEGIN_VS_SHADER( zm_nightvision, "Help for the night vision shader" )
//BEGIN_SHADER_PARAMS
//SHADER_PARAM( FRAMETEXTURE, SHADER_PARAM_TYPE_TEXTURE, "", "" )
//END_SHADER_PARAMS
//
//
//SHADER_INIT
//{
//	if( params[FRAMETEXTURE]->IsDefined() )
//	{
//		LoadTexture( FRAMETEXTURE );
//	}
//}
//
//SHADER_FALLBACK
//{
//	if ( g_pHardwareConfig->GetDXSupportLevel() < 81 )
//		return "Wireframe";
//	return 0;
//}
//
//SHADER_DRAW
//{
//	SHADOW_STATE
//	{
//		pShaderShadow->EnableDepthWrites( false );
//
//		pShaderShadow->EnableTexture( SHADER_TEXTURE_STAGE0, true );
//		int fmt = VERTEX_POSITION;
//		pShaderShadow->VertexShaderVertexFormat( fmt, 1, 0, 0, 0 );
//
//
//		pShaderShadow->SetPixelShader( "nightvision_ps20", 0 ); 
//		pShaderShadow->SetVertexShader( "nightvision_vs11", 0 );
//
//		pShaderShadow->EnableBlending( true );
//		pShaderShadow->BlendFunc( SHADER_BLEND_SRC_ALPHA, SHADER_BLEND_ONE_MINUS_SRC_ALPHA);
//	}
//
//	DYNAMIC_STATE
//	{
//		BindTexture( SHADER_TEXTURE_STAGE0, FRAMETEXTURE, -1 );
//
//	}
//	Draw();
//}
//END_SHADER

#include "BaseVSShader.h"

//#include "post_nightvision_ps20.inc"
//#include "PassThrough_vs20.inc" //files generated by compiling the fxc files

BEGIN_VS_SHADER( NightVision, "Help for Post_NightVision" ) //Begin the shader
	
	BEGIN_SHADER_PARAMS
	SHADER_PARAM(NVLEVEL, SHADER_PARAM_TYPE_FLOAT, "1.0", "")
	//This is our shader parameter taken from the material file called NVLEVEL, write "$nvlevel" 10 for example in the .vmt
	END_SHADER_PARAMS

	SHADER_INIT_PARAMS() //called after parameters have been initalised
	{
	}

	SHADER_FALLBACK //dosnt fallback to anything (I know this works on dx9, hasnt been tested on others)
	{
		return 0;
	}

	bool NeedsFullFrameBufferTexture( IMaterialVar **params ) const //does this need the full screen? in our case yes
	{
		return true;
	}

	SHADER_INIT //initializes the shader
	{
	}

	SHADER_DRAW
	{
		SHADOW_STATE
			{
				pShaderShadow->EnableTexture( SHADER_TEXTURE_STAGE0, true ); //enables SHADER_TEXTURE_STAGE0

				pShaderShadow->EnableDepthWrites( false ); //depth writes aren't needed 
				int fmt = VERTEX_POSITION;
				pShaderShadow->VertexShaderVertexFormat( fmt, 1, 0, 0, 0 ); //sets the vertex format for the .fxc
				pShaderShadow->SetVertexShader( "nightvision_vs11", 0 ); //set the vertex shader
				pShaderShadow->SetPixelShader( "nightvision_ps20" ); //set the pixel shader
				DefaultFog();
			}
		DYNAMIC_STATE
			{
				//float Scale = params[NVLEVEL]->GetFloatValue(); // get the value of NVLEVEL and turn it to a float
				//float vScale[4] = {Scale, Scale, Scale, 1}; //new float using NVLEVEL values
				//pShaderAPI->SetPixelShaderConstant(0, vScale); //set the first shader variable to our float
				pShaderAPI->BindFBTexture( SHADER_TEXTURE_STAGE0 ); //set the shader texture to our frame buffer
			}
		Draw(); //draw the shader
	}

END_SHADER